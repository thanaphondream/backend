generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  OFFICER
}

model Search {
  id    Int    @id @default(autoincrement())
  name  String
  count Int
}

model User {
  id        Int         @id @default(autoincrement())
  username  String      @unique @db.VarChar(30)
  password  String      @db.VarChar(72)
  email     String?
  phon      String?
  role      Role        @default(USER)
  Payment   Payment[]
  location  Location[]
  Reviews   Reviews[]
  Profile   Profile[]
  cart      Cart[]
  ordercart OrderCart[]

  @@map("users")
}

enum Status {
  PENDING
  DOING
  DONE
}

model Cart {
  id         Int      @id @default(autoincrement())
  total      Int
  all_price  Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  status     String
  menutems   Menutems @relation(fields: [menutemsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menutemsId Int
}

model Menutems {
  id          Int         @id @default(autoincrement())
  ItemName    String
  price       Int
  description String
  file        String      @db.Text
  Reviews     Reviews[]
  Cart        Cart[]
  ordercart   OrderCart[]
}

model Reviews {
  id         Int      @id @default(autoincrement())
  rating     Int
  comment    String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int
  menutem    Menutems @relation(fields: [menutemsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menutemsId Int
}

model Order {
  id        Int         @id @default(autoincrement())
  total_all Int
  allprice  Int
  status    String
  date      DateTime    @default(now())
  ordercart OrderCart[]
  Payment   Payment[]
}

model OrderCart {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  total      Int
  all_price  Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  status     String
  menutems   Menutems @relation(fields: [menutemsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menutemsId Int

  @@index([orderId])
}

model Payment {
  id         Int        @id @default(autoincrement())
  userId     Int
  amount     Float
  pay        String
  status     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  location   Location   @relation(fields: [locationId], references: [id])
  locationId Int
  order      Order      @relation(fields: [orderId], references: [id])
  orderId    Int
  Delivery   Delivery[]
}

model Location {
  id           Int       @id @default(autoincrement())
  provinces    String    @db.VarChar(50)
  amphures     String    @db.VarChar(50)
  districts    String    @db.VarChar(50)
  zip_code     Int
  road         String    @db.VarChar(255)
  village      String    @db.VarChar(20)
  house_number String
  other        String    @db.VarChar(50)
  longitude    Float
  latitude     Float
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  Payment      Payment[]
}

model Delivery {
  id        Int     @id @default(autoincrement())
  image     String  @db.Text
  name      String  @db.VarChar(50)
  Note      String  @db.VarChar(200)
  payment   Payment @relation(fields: [paymentId], references: [id])
  paymentId Int
}

model provinces {
  id           Int    @id @default(autoincrement())
  code         Int
  name_th      String @db.VarChar(50)
  name_en      String @db.VarChar(50)
  geography_id Int
}

model amphures {
  id          Int    @id @default(autoincrement())
  code        String @db.VarChar(45)
  name_th     String @db.VarChar(45)
  name_en     String @db.VarChar(45)
  province_id Int
}

model districts {
  id         Int    @id @default(autoincrement())
  zip_code   Int
  name_th    String @db.VarChar(45)
  name_en    String @db.VarChar(45)
  amphure_id String
}

model Profile {
  id      Int    @id @default(autoincrement())
  image   String @db.Text
  imagebg String @db.Text
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
}
